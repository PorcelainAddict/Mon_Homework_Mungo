
1. What is responsible for defining the routes of the games resource?
The create_router.js file in the helpers folder defines our POST, GET, PUT, DELETE routes, for any API routes that we require, meaning that we adhere to DRY code.

2. What do you notice about the folder structure? Whats the client responsible for? Whats the server responsible for?
Both the server and the client are seperate within the file structure as they can be run seperately. The client is responsible for the front-end of the app . The server is responsible for the back-end of the application and creating our API.

3. What are the the responsibilities of server.js?
The server.js is responsible for what is required to run the back-end and also tells us how it is run -example: The parser package let's JSON requests be made readable over the internet.

4. What are the responsibilities of the gamesRouter?
The gamesRouter is responsible for calling back the routes of the game within the server.js. This gives us access to the front-end.

5. What process does the the client (front-end) use to communicate with the server?
The front end uses a request/response process to communicate with the server. The front-end needs to have mounted the API so that the front-end can perform CRUD commands on the server.

6. What optional second argument does the fetch method take? And what is it used for in this application?
The fetch can also accept an init object that allows us to control a number of different settings.

7. Which of the games API routes does the front-end application consume (i.e. make requests to)?
The GameService API uses the POST route to make requests.

8. What are we using the MongoDB Driver for?
To keep the app light-weight, as MongoDB driver does not require helpers or abstractions, and ultimately has fewer dependencies required to run our app.
